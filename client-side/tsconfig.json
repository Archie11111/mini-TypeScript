{
  "compilerOptions": {
    /* Basic Options */
    "target": "es5",                          /* 用来指定编译后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "module": "commonjs",                     /* 用来指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": [                                  
      "es6","dom","es2015"
    ],                                        /* 用于指定要包含在编译中的库文件 */
    // "allowJs": true,                       /* allowJs设置的值为true或false,用来指定是否允许编译js文件，默认是false，即为不编译js文件 */
    // "checkJs": true,                       /* checkJs的值为true或false，用来指定是否检查和报告js文件中的错误，默认是false */
    // "jsx": "preserve",                     /* 指定jsx代码用于的开发环境：''preserve','react-native', or 'react'  */
    // "declaration": true,                   /* declaration的值为true或false，用来指定是否在变异的时候生成相应的.d.ts声明文件。 */
    // "declarationMap": true,                /* 值为true或false，指定是否为声明文件.d.ts生成map文件 */
    // "sourceMap": true,                     /* sourceMap的值为true或false，用来指定编译时是否生成map文件 */
    // "outFile": "./",                       /* outFile用来指定将输出文件合并为一个文件，他的值为一个文件路径名，比如设置为"./dist/main.js".则输出的文件为一个main.js文件。但是要注意只有设置module的值为amd和system模块时才支持这个配置 */
    // "outDir": "./",                        /* 用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹 */
    // "rootDir": "./",                       /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译. */
    // "composite": true,                     /* 是否编译构建应用 */
    // "incremental": true,                   /* Enable incremental compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    // "removeComments": true,                /* 值为true或false，用于指定是否将编译后的文件中的注释删掉，设为true的话为删除注释，默认为false */
    // "noEmit": true,                        /* 不生成编译文件 */
    // "importHelpers": true,                 /* importHelpers只为bool值，指定是否引入tslib里的辅助工具函数，默认为false. */
    // "downlevelIteration": true,            /* 为es5或者es3时，为"for-of"、"spread"、 "destructuring"中的迭代器提供完全支持  */
    // "isolatedModules": true,               /* isolatedModules的值为bool值，指定是否将每个文件作为单独的模块，默认为true，他不可以和declare同时设定 */

    /* Strict Type-Checking Options */
    // "strict": true,                        /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* 值为bool值，用于指定是否启动所有类型检查，如果设为true则会同时开启下面几个严格类型检查，默认为false */
    "strictNullChecks": false,                /* 值为bool值，当设为true时，null和undefined值不能复制给非这两种类型的值，别的类型的值也不能 */
    // "strictFunctionTypes": true,           /* 值为bool值，用来指定是否使用函数参数双向协变检查。 */
    // "strictBindCallApply": true,           /* 值为bool值， 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */
    // "strictPropertyInitialization": true,  /* 值为bool值， 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认false */
    // "noImplicitThis": true,                /* 值为bool值， 当this表达式的值为any类型的时候，生成一个错误*/
    // "alwaysStrict": true,                  /* 值为bool值， 始终以严格模式检查每个模块*/

    /* Additional Checks */
    // "noUnusedLocals": true,                /* 值为bool值，用于检查是否有定义了但是没有使用的变量，对于这一点的检测使用ESLint可以在你书写的时候做提示，可以配合使用 */
    // "noUnusedParameters": true,            /* 值为bool值，用于检查是否在函数体中没有使用的参数，这个也可以配置ESLint来做检查，默认为false */
    // "noImplicitReturns": true,             /* 值为bool值，用于检查是否有返回值，设为true后，如果函数没有返回值则会提示，默认false */
    // "noFallthroughCasesInSwitch": true,    /* 值为bool值，用于检查switch中是否有case没有使用break跳出switch，默认false */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* moduleResolution用于选择模块解析策略，有"node"和“class”两种类型 */
    // "baseUrl": "./",                       /* BaseUrl 用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl影响 */
    // "paths": {
    // //   "jquery": ["node_modules/jquery/dist/jquery"]
    // // 所有非相对路径，都能被*映射，到对应路径下找type
    //   "*": ["node_modules/@types", "src/typings"]
    // },
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* rootDirs可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径中内容都放到一个文件夹中 */
    // "typeRoots": [],                       /* typeRoots用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载 */
    // "types": [],                           /* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来 */
    // "allowSyntheticDefaultImports": true,  /* 用来指定允许从没有默认导出的模块中导入 */
    "esModuleInterop": true,                  /* 通过为导入内容闯将命名空间，实现CommonJs和ES5模块之间的互操作性 */
    // "preserveSymlinks": true,              /* 不把发号链接解析为真实路径，具体一个了解下webpack，nodejs的symlink相关知识 */

    /* Source Map Options */
    // "sourceRoot": "",                      /* sourceRoot用于指定调试器应该找到ts文件而不是源文件位置，这个值会被写进.map文件中 */
    // "mapRoot": "",                         /* mapRoot用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性 */
    // "inlineSourceMap": true,               /* 值为bool值，指定是否将map文件的内容和js文件编译在同一个js文件中 */
    // "inlineSources": true,                 /* 值为bool值，指定是否进一步将.ts文件的内容也包含到输出文件中*/

    /* Experimental Options */
    "experimentalDecorators": true,           /* 值为bool值，用于指定是否启用实验性的装饰器特性 */
    // "emitDecoratorMetadata": true,         /* 值为bool值，用于指定是否为装饰器提供元数据支持，关于元数据，也是es6的新标准，可以通过Reflect提供的静态方法获取元数据，如果如要使用Reflect的一些方法，需要映入ES2015.Reflect之歌库 */
  },
  // include 也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以是相对路径或绝对路径，而且可以使用通配符，比如"./src"即为表示要编译src文件下的所有文件以及子文件夹的文件
  "include": [ 
    "./src/**/*.ts",
    "./src/**/*.d.ts",
  ],
  // "files": [], // files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件。如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译更目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用*？**/等通配符
  // "exclude": [], // exclude表示要排除的、不编译的文件，他也可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符。
  // "extends": [], // extends 可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件。
  // "compileOnSave": true, // 在我们编辑了项目中文件保存的时候，会重新编译。这个功能要编辑器支持。
  // "references": [], // 指定要引用的项目
}
